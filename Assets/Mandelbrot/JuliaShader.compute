#pragma kernel julia_pixel

RWTexture2D<float4> canvas;
uniform uint canvas_size_x;
uniform uint canvas_size_y;

uniform float view_scalar;
uniform float view_shift_x;
uniform float view_shift_y;

uniform float func_base_real;
uniform float func_base_imaginary;
uniform uint func_iterations;


uniform half4 color_real_positive;
uniform half4 color_imaginary_positive;
uniform half4 color_real_negative;
uniform half4 color_imaginary_negative;


float2 mul_complex(const float2 a, const float2 b)
{
    // Standard complex numbers multiplication
    return float2(
        a.x * b.x - a.y * b.y,
        a.x * b.y + a.y * b.x
        );
}

float saturate_result(float f)
{
    const float sigmoid_kick = 0.6;
    
    // Sigmoid, stretched to span values at (-1,1) instead of (0,1)
    f = 1 / (1 + exp(f) * sigmoid_kick) * 2 - 1;

    return f;
}

float2 saturate_result(float2 result)
{
    result.x = saturate_result(result.x);
    result.y = saturate_result(result.y);
    
    return result;
}

float4 colorize(const float2 number)
{
    float4 result = float4(0.0,0.0,0.0,1.0);

    result += color_real_positive * saturate(number.x);
    result += color_real_negative * saturate(-number.x);
    result += color_imaginary_positive * saturate(number.y);
    result += color_imaginary_negative * saturate(-number.y);

    return result;
}

[numthreads(8,8,1)]
void julia_pixel (const uint3 id : SV_DispatchThreadID)
{
    // Mandelbrot set function argument
    float2 arg;
    {
        const uint screen_buki = min(canvas_size_x,canvas_size_y);
        const float2 screen_px = id.xy - float2(canvas_size_x,canvas_size_y) / 2.0;
        const float2 screen_f = screen_px / ((float)screen_buki);
        
        arg = screen_f * view_scalar + float2(view_shift_x,view_shift_y);
    }

    // Complex number to be iterated on
    float2 number = float2(func_base_real,func_base_imaginary);

    // Mandelbrot set iterations
    uint iteration = 0;
    while (iteration < func_iterations)
    {
        number = mul_complex(number, number) + arg;
        iteration++;
    }

    const float2 result = saturate_result(number);
    canvas[id.xy] = colorize(result);
}
